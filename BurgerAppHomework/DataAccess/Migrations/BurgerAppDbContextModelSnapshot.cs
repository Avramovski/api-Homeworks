// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BurgerAppDbContext))]
    partial class BurgerAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Burger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HasFries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsVegan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsVegetarian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasFries = "Yes",
                            IsVegan = "No",
                            IsVegetarian = "No",
                            Name = "Classic Burger",
                            Price = 10
                        },
                        new
                        {
                            Id = 2,
                            HasFries = "Yes",
                            IsVegan = "No",
                            IsVegetarian = "No",
                            Name = "Veggie Burger",
                            Price = 8
                        },
                        new
                        {
                            Id = 3,
                            HasFries = "Yes",
                            IsVegan = "No",
                            IsVegetarian = "No",
                            Name = "Vegan Delight",
                            Price = 9
                        },
                        new
                        {
                            Id = 4,
                            HasFries = "Yes",
                            IsVegan = "No",
                            IsVegetarian = "No",
                            Name = "Bacon Cheeseburger",
                            Price = 12
                        });
                });

            modelBuilder.Entity("Domain.BurgerOrder", b =>
                {
                    b.Property<int>("BurgerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("BurgerId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("BurgerOrder");

                    b.HasData(
                        new
                        {
                            BurgerId = 1,
                            OrderId = 1
                        },
                        new
                        {
                            BurgerId = 2,
                            OrderId = 2
                        },
                        new
                        {
                            BurgerId = 3,
                            OrderId = 3
                        },
                        new
                        {
                            BurgerId = 4,
                            OrderId = 4
                        },
                        new
                        {
                            BurgerId = 1,
                            OrderId = 4
                        },
                        new
                        {
                            BurgerId = 2,
                            OrderId = 1
                        });
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsDelivered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            FullName = "John Doe",
                            IsDelivered = "Yes",
                            Location = "Downtown"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            FullName = "Jane Smith",
                            IsDelivered = "No",
                            Location = "Uptown"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St",
                            FullName = "Alice Johnson",
                            IsDelivered = "Yes",
                            Location = "Suburb"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Pine St",
                            FullName = "Bob Brown",
                            IsDelivered = "No",
                            Location = "City Center"
                        });
                });

            modelBuilder.Entity("Domain.Burger", b =>
                {
                    b.HasOne("Domain.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Domain.BurgerOrder", b =>
                {
                    b.HasOne("Domain.Burger", "Burger")
                        .WithMany("BurgerOrders")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Order", "Order")
                        .WithMany("BurgerOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Burger", b =>
                {
                    b.Navigation("BurgerOrders");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Navigation("BurgerOrders");

                    b.Navigation("Burgers");
                });
#pragma warning restore 612, 618
        }
    }
}
